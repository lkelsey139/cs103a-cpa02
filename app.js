/*
  app.js -- This creates an Express webserver with login/register/logout authentication
  This version has removed all of the authentication and database management.
*/

// *********************************************************** //
//  Loading packages to support the server
// *********************************************************** //
// First we load in all of the packages we need for the server...
const createError = require("http-errors"); // to handle the server errors
const express = require("express");
const dotenv = require("dotenv").configure()
const path = require("path");  // to refer to local paths
const cookieParser = require("cookie-parser"); // to handle cookies
const session = require("express-session"); // to handle sessions using cookies
const bodyParser = require("body-parser"); // to handle HTML form input
const debug = require("debug")("personalapp:server"); 
const layouts = require("express-ejs-layouts");
const axios = require('axios')

let courses=[]
// here is how we load a json file into express from a file:
courses = require('./public/data/courses20-21.json')

// here is how we load a json file into express from another server
/*
let getCourses = async () => {
  response = await axios.get('https://www.cs.brandeis.edu/~tim/cs103aSpr22/courses20-21.json');
  courses = response.data 
}
getCourses()
*/


// *********************************************************** //
// Initializing the Express server 
// This code is run once when the app is started and it creates
// a server that respond to requests by sending responses
// *********************************************************** //
const app = express();

// Here we specify that we will be using EJS as our view engine
app.set("views", path.join(__dirname, "views"));
app.set("view engine", "ejs");



// this allows us to use page layout for the views 
// so we don't have to repeat the headers and footers on every page ...
// the layout is in views/layout.ejs
app.use(layouts);

// Here we process the requests so they are easy to handle
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser());
app.use(bodyParser.urlencoded({ extended: false }));

// Here we specify that static files will be in the public folder
app.use(express.static(path.join(__dirname, "public")));

// Here we enable session handling using cookies


// *********************************************************** //
//  Defining the routes the Express server will respond to
// *********************************************************** //



// specify that the server should render the views/index.ejs page for the root path
// and the index.ejs code will be wrapped in the views/layouts.ejs code which provides
// the headers and footers for all webpages generated by this app
app.get("/", (req, res, next) => {
  res.render("index");
});

app.get("/about", (req, res, next) => {
  res.render("about");
});

app.get("/pa03", (req, res, next) => {
  res.locals.vals=[2,3,5,7,11,13,17,19]
  res.locals.timcs = courses.byInstructorEmail('tjhickey')
  res.render("pa03");
});

app.get("/ejsdemo", (req, res, next) => {

  // define some variables for use in the ejs page
      const adminId = '789sd8f923c'
      const petnames = ["Pippin", "Meri", "Fezco", "Allie"] 
      const person ={'id':adminId, 'name':'Tim','age':66,'dept':'COSI'}
      const pets = 
        [
          {'name':'Pippin', 'species':'dog', 'age':18},
          {'name':'Meri', 'species':'dog', 'age':11},
          {'name':'Fezco', 'species':'dog', 'age':1},
          {'name':'Allie', 'species':'cat', 'age':2},
        ];        
  res.locals.adminId = adminId
  res.locals.petnames = petnames
  res.locals.person = person
  res.locals.pets = pets
  
  res.render("ejsdemo");
});

app.get("/sandbox", 
  (req, res, next) => {
        res.render("sandbox");
      }
);

app.get("/forms", 
  (req, res, next) => {
        res.render("formdemo");
      }
);

app.post("/forms", 
  (req, res, next) => {
        res.json(req.body)
      }
);

app.get("/boots", 
  (req, res, next) => {

        res.render("bootstrapdemo");
      }
);

app.get("/routesdemo", 
  (req, res, next) => {
        res.render("routesdemo");
      }
);

app.get("/simpleform",
  (req,res,next) => {
    res.render("simpleform")
  }
)

app.post("/simpleform",
  (req,res,next) => {
    const {username,age} = req.body;
    res.locals.username=username;
    res.locals.age=age;
    res.render("simpleresponse")
  }
)

app.get("/coursedemo",
  (req,res,next) => {
    res.locals.course = courses[0]
    res.render('coursedemo')
  }
)

app.get("/coursedemo/:n",
  (req,res,next) => {
    const n = parseInt(req.params.n)
    res.locals.course = courses[n]
    res.render('coursedemo')
  }
)

app.get("/coursefinder",
  (req,res,next) => {
    res.locals.courses = []
    res.locals.email="none"
    res.render('coursefinder')
  }
)

app.post("/coursefinder",
(req,res,next) => {
  const email = req.body.email
  
  // here we filter and sort the courses before sending to the view to be displayed
  res.locals.courses = 
   courses
    .filter(x=>x['instructor'][2]==email)
    .filter(x=>(x['enrolled']>0))
    .sort((x,y) => (y['enrolled']-x['enrolled'])) // must give a comparison function to the sort method
  res.locals.email = email
  res.render('coursefinder')
}
)

function factor(n){
  if (n==1){
    return(n);
  }
  let d=2;
  while (d*d<=n){
    if (n%d==0){
      return d
    } else {
      d=d+1
    }
  }
  return(d)
}

function factorize(n){
  let factors = []
  let d = factor(n)
  while (d>1){
    factors = factors+[d]
    n = n//d
    d = factor(n)
  }
  return(factors)
}

app.get("/factor",
  (req,res,next) => {
    res.locals.factors=[]
    res.render('factorize')
  }
)

app.post("/factor",
  (req,res,next)=> {
    const {num}=req.body;
    const n = parseInt(num); // convert string to number
    res.locals.factors = factorize(n)
    res.locals.n = n
    res.render('factorize')
  })

app.get('/pets', (req,res,next) => {
  res.render('pets')
})

app.get('/recipes',
   async (req,res,next) => {
    const response = 
        await axios.get('https://www.themealdb.com/api/json/v1/1/list.php?i=list')
      res.locals.ingredients = response.data.meals.map(x => x['strIngredient'])
      res.locals.ingredient = 'none'
      res.locals.meals=[]
      res.render('recipes')

   })

  app.post('/recipes',
  async (req,res,next) => {
    try {
      const response2 = 
      await axios.get('https://www.themealdb.com/api/json/v1/1/list.php?i=list')
    res.locals.ingredients = response2.data.meals.map(x => x['strIngredient'])
    
      const response = 
         await axios.get('http://www.themealdb.com/api/json/v1/1/filter.php?i='+req.body.ingredient)
      res.locals.meals = response.data.meals  // list of objects {strMeal, strMealThumb, idMeal}
      res.locals.ingredient = req.body.ingredient
      res.render('recipes')
      
    } catch (error) {
      next(error)     
    }
  })

  app.get('/recipe/:idMeal',
  async (req,res,next) => {
    try {
      const response = await axios.get('http://www.themealdb.com/api/json/v1/1/lookup.php?i='+req.params.idMeal)
      res.locals.meal = response.data.meals[0]  // 
      res.render('recipe')
      
    } catch (error) {
      next(error)     
    }
  })



// here we catch 404 errors and forward to error handler
app.use(function(req, res, next) {
  next(createError(404));
});

// this processes any errors generated by the previous routes
// notice that the function has four parameters which is how Express indicates it is an error handler
app.use(function(err, req, res, next) {
  // set locals, only providing error in development
  res.locals.message = err.message;
  res.locals.error = req.app.get("env") === "development" ? err : {};
  // render the error page
  res.status(err.status || 500);
  res.render("error");
});


// *********************************************************** //
//  Starting up the server!
// *********************************************************** //
//Here we set the port to use between 1024 and 65535  (2^16-1)
const port = "5000";
app.set("port", port);

// and now we startup the server listening on that port
const http = require("http");
const { application } = require("express");
const server = http.createServer(app);

server.listen(port);

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

server.on("error", onError);

server.on("listening", onListening);

module.exports = app;

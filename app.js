/*
  app.js -- This creates an Express webserver with login/register/logout authentication
*/

// *********************************************************** //
//  Loading packages to support the server
// *********************************************************** //
// First we load in all of the packages we need for the server...
const createError = require("http-errors"); // to handle the server errors
const express = require("express");
const path = require("path");  // to refer to local paths
const cookieParser = require("cookie-parser"); // to handle cookies
const session = require("express-session"); // to handle sessions using cookies
const debug = require("debug")("personalapp:server"); 
const layouts = require("express-ejs-layouts");
const axios = require("axios")

// *********************************************************** //
//  Loading models
// *********************************************************** //
const BookRecs = require('./models/BookRecs')
const BookCollection = require('./models/BookCollection')

// *********************************************************** //
//  Connecting to the database
// *********************************************************** //

const mongoose = require( 'mongoose' );

 const mongodb_URI = process.env.mongodb_URI

mongoose.connect( mongodb_URI, { useNewUrlParser: true, useUnifiedTopology: true } );
// fix deprecation warnings
mongoose.set('useFindAndModify', false); 
mongoose.set('useCreateIndex', true);

const db = mongoose.connection;
db.on('error', console.error.bind(console, 'connection error:'));
db.once('open', function() {console.log("we are connected!!!")});


// *********************************************************** //
// Initializing the Express server 
// This code is run once when the app is started and it creates
// a server that respond to requests by sending responses
// *********************************************************** //
const app = express();

// Here we specify that we will be using EJS as our view engine
app.set("views", path.join(__dirname, "views"));
app.set("view engine", "ejs");



// this allows us to use page layout for the views 
// so we don't have to repeat the headers and footers on every page ...
// the layout is in views/layout.ejs
app.use(layouts);

// Here we process the requests so they are easy to handle
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser());

// Here we specify that static files will be in the public folder
app.use(express.static(path.join(__dirname, "public")));

// Here we enable session handling using cookies
app.use(
  session({
    secret: "zzbbyanana789sdfa8f9ds8f90ds87f8d9s789fds", // this ought to be hidden in process.env.SECRET
    resave: false,
    saveUninitialized: false
  })
);

// *********************************************************** //
//  Defining the routes the Express server will respond to
// *********************************************************** //


// here is the code which handles all /login /signin /logout routes
const auth = require('./routes/auth');
const { deflateSync } = require("zlib");
app.use(auth)

// middleware to test is the user is logged in, and if not, send them to the login page
const isLoggedIn = (req,res,next) => {
  if (res.locals.loggedIn) {
    next()
  }
  else res.redirect('/login')
}

// specify that the server should render the views/index.ejs page for the root path
// and the index.ejs code will be wrapped in the views/layouts.ejs code which provides
// the headers and footers for all webpages generated by this app
app.get("/", (req, res, next) => {
  res.locals.choice = ""
  res.render("index");
});

app.get("/about", (req, res, next) => {
  res.render("about");
});

app.get("/catfacts",
async (req, res, next) => {
  const response = await axios.get("https://catfact.ninja/fact")
  res.locals.catFact = response.data.fact 
  res.render('catfacts')
}
);
app.get("/Dogs",
async (req, res, next) => {
  const response = await axios.get("https://dog.ceo/api/breeds/image/random")
  res.locals.dogphoto = response.data.message
  res.render("dogphotos")
}
);
app.get("/Suggestions",
async (req, res, next) => {
  const response = await axios.get("https://www.boredapi.com/api/activity")
  res.locals.activity = response.data.activity
  res.locals.participants = response.data.participants
  res.render("suggestions")
}
);
app.get("/BookClub",
  async (req, res, next)=>{
      res.render("bookclub")
});

app.get("/Bookclub/Share",
  async (req, res, next)=>{
    res.render("bookshare")
  }
);
app.post("/BookClub/Share",
  async (req, res, next)=>{
    res.render("bookshare")
  }
)

app.get("/Bookclub/Find",
  // isLoggedIn,
  async (req, res, next)=>{
    res.locals.books = []
    res.render("bookrecs")
  }
);
app.post("/Bookclub/Share/Add",
  async (req,res,next) => {
    try {
      const title = req.body.title
      const writer = req.body.writer
      const genre = req.body.genre
      res.locals.title = title
      res.locals.writer = writer
      res.locals.genre = genre
      const lookup = await BookRecs.find({title,writer,genre})
      if (lookup.length==0) {
        const books = new BookRecs({title,writer,genre})
        await books.save()
      }
      res.render("Bookshare2")
    } catch (e) {
      next(e)
    }
  }
)

app.post("/Bookclub/Find",
  async (req, res, next)=>{
    try {
      const {genre} = req.body;
      const books = await BookRecs.find({genre:genre})
      res.locals.books = books
      res.render("bookrecs")
    }catch (e){
      next(e)
    }
  }
);
app.get("/Bookshelf",
  isLoggedIn,
  async (req,res,next)=>{
    try {
      let userID = res.locals.user._id;
      const lookup = 
          (await BookCollection.find({userID})).map(x => x.book)
      console.log(lookup)
      const books = (await BookRecs.find({_id:{$in: lookup}}))
      res.locals.books = books
      //console.log(books)
      res.render("bookshelf")
    }catch (e){
      next(e)
    }
  }
)
app.get("/Bookclub/Add/:book",
isLoggedIn,
async (req,res,next)=>{
  try {
    let book = req.params.book
    let userID = res.locals.user._id
    const lookup = await BookCollection.find({userID, book})
    //console.log(lookup)
    if (lookup.length==0) {
      let books = await new BookCollection({userID, book})
      await books.save()
    }
    res.redirect('/Bookshelf')
  } catch (e){
    next(e)
  }
}
)
app.get("/Bookshelf/del/:book",
isLoggedIn,
async (req,res, next)=>{
  try {
    await BookCollection.remove(
      {userID: res.locals.user._id, book:req.params.book})
    res.redirect("/Bookshelf")
  } catch (e){
    next(e)
  }
}
)




/* ************************
  Functions needed for the course finder routes
   ************************ */
app.use(isLoggedIn)


// *********************************************************** //
//  Starting up the server!
// *********************************************************** //
//Here we set the port to use between 1024 and 65535  (2^16-1)
const port = process.env.PORT|| "5000";
console.log('connecting on port '+port);
app.set("port", port);

// and now we startup the server listening on that port
const http = require("http");
const { reset } = require("nodemon");
const { json } = require("express/lib/response");
const { countReset } = require("console");
const server = http.createServer(app);

server.listen(port);

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

server.on("error", onError);

server.on("listening", onListening);

module.exports = app;
